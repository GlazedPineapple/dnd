name: CI
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - uses: actions-rs/cargo@v1
        name: cargo check
        with:
          command: check
          args: --all-features
      - uses: actions-rs/cargo@v1
        name: cargo test
        with:
          command: test
          args: --all-features
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
  build:
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features
      - name: Get platform specific asset name
        id: asset_name
        run: |
          set -ex

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv ./target/release/dnd.exe ./target/release/x86_64-windows-dnd.exe 
            echo "::set-output name=file::x86_64-windows-dnd.exe"
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mv ./target/release/dnd ./target/release/x86_64-linux-dnd 
            echo "::set-output name=file::x86_64-linx-dnd"
          else
            mv ./target/release/dnd ./target/release/x86_64-macos-dnd 
            echo "::set-output name=file::x86_64-macos-dnd"
          fi
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.asset_name.outputs.file }}
          path: ./target/release/
  create_release:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: [none, x86_64-windows-dnd.exe, x86_64-linx-dnd, x86_64-macos-dnd]
    steps:
      - name: Create Release
        if: ${{ matrix.file == "none" }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: >
            Download the binaries for Release ${{ github.ref }} below for your platform,
            or use the provided shell script for installation
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v2
        if: ${{ matrix.file != "none" }}
        with:
          path: ./artifacts
      - name: Upload Release Asset macos
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.file != "none" }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: x86_64-macos-dnd
          asset_content_type: application/octet-stream
